Microsoft (R) Macro Assembler Version 14.28.29336.0	    03/07/21 13:15:26
!Project 6     (Proj5_dunnand.asm			     Page 1 - 1


				TITLE Project 6     (Proj5_dunnand.asm)

				; Author: Andrew Dunn
				; Last Modified: 2/28/2021
				; OSU email address: dunnand@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 2/28/2021
				; Description: This program generates a random array of 200 integers between 10 and 29.
				; It then sorts the array and prints the sorted values. It calculates the median value and prints it
				; It then counts the total of each number within the sorted array and creates a new array with the
				; counts of each number between 10 and 29.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				mGetString MACRO prompt, outputLocation, outputLocationSize
					MOV EDX, prompt
					CALL WriteString

					MOV EDX, outputLocation
					MOV ECX, outputLocationSize
					CALL ReadString
				ENDM



 00000000			.data
 00000000 50 52 4F 47 52		intro_1				BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10 
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 0000003E  57 72 69 74 74							BYTE	"Written by: Andrew Dunn" , 13, 10, 0
	   65 6E 20 62 79
	   3A 20 41 6E 64
	   72 65 77 20 44
	   75 6E 6E 0D 0A
	   00
 00000058 50 6C 65 61 73		intro_2				BYTE	"Please provide 10 signed decimal integers.", 13, 10
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A
 00000084  45 61 63 68 20							BYTE	"Each number needs to be small enough to fit inside a 32 bit register.", 13, 10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 000000CB  41 66 74 65 72							BYTE	"After you have finished inputting the raw numbers I will display", 13, 10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 0D
	   0A
 0000010D  61 20 6C 69 73							BYTE	"a list of the integers, their sum, and their average value.", 13, 10, 0
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
 0000014B 54 68 61 6E 6B		outro_1				BYTE	"Thanks for playing!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 0000015F 50 6C 65 61 73		prompt_1			BYTE	"Please enter an signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 0000017F  00000021 [			userString			BYTE	33 DUP(0) 
	    00
	   ]
 000001A0  0000000A [			userArray			SDWORD	10 DUP(?)
	    00000000
	   ]


				; (insert variable definitions here)

 00000000			.code
 00000000			main PROC
					; Introduction
 00000000  68 00000000 R		PUSH OFFSET intro_1
 00000005  68 00000058 R		PUSH OFFSET intro_2
 0000000A  E8 00000027			CALL introduction

 0000000F  68 0000015F R		PUSH OFFSET prompt_1
 00000014  68 0000017F R		PUSH OFFSET userString
 00000019  6A 21			PUSH SIZEOF userString
 0000001B  68 000001A0 R		PUSH OFFSET userArray
 00000020  E8 00000032			CALL ReadVal

					; Goodbye
 00000025  68 0000014B R		PUSH OFFSET outro_1
 0000002A  E8 00000174			CALL farewell
				; (insert executable instructions here)

					Invoke ExitProcess,0	; exit to operating system
 0000002F  6A 00	   *	    push   +000000000h
 00000031  E8 00000000 E   *	    call   ExitProcess
 00000036			main ENDP

				; ---------------------------------------------------------------------------------
				;  Name: introduction
				;	
				;  Introduces the name of the program and programmer
				;
				;  Receives: intro_1, intro_2
				;
				;  Preconditions:  None
				;
				;  Postconditions: Displays introductory messages, intro_2 OFFSET in EDX
				;
				;  Returns: None
				; ---------------------------------------------------------------------------------
 00000036			introduction PROC
					; save stack frame
 00000036  55				PUSH EBP
 00000037  8B EC			MOV EBP, ESP

					; print intro_1
 00000039  8B 55 0C			MOV EDX, [EBP+12]
 0000003C  E8 00000000 E		CALL WriteString
 00000041  E8 00000000 E		CALL Crlf

					; print intro_2
 00000046  8B 55 08			MOV EDX, [EBP+8]
 00000049  E8 00000000 E		CALL WriteString
 0000004E  E8 00000000 E		CALL Crlf
					
					; return procedure
 00000053  5D				POP EBP
 00000054  C2 0008			RET 8
 00000057			introduction ENDP

				; ---------------------------------------------------------------------------------
				;  Name: ReadVal
				;	
				;  Prompts user for an integer value, reads it as a string and converts to SDWORD, 
				;	and then stores this value in 
				;
				;  Receives: prompt_1, userString, userArray
				;
				;  Preconditions: randomArray must be a DWORD array
				;
				;  Postconditions: None
				;
				;  Returns: userArray
				; ---------------------------------------------------------------------------------

 00000057			ReadVal PROC
					; build stack frame
 00000057  55				PUSH EBP
 00000058  8B EC			MOV EBP, ESP
 0000005A  52				PUSH EDX
 0000005B  51				PUSH ECX
 0000005C  53				PUSH EBX

					; put address of first element of random array into ESI and start counter
					mGetString [EBP + 20], [EBP + 16], [EBP + 12]
 0000005D  8B 55 14	     1		MOV EDX, [EBP + 20]
 00000060  E8 00000000 E     1		CALL WriteString
 00000065  8B 55 10	     1		MOV EDX, [EBP + 16]
 00000068  8B 4D 0C	     1		MOV ECX, [EBP + 12]
 0000006B  E8 00000000 E     1		CALL ReadString
					
 00000070  8B 5D 08			MOV EBX, [EBP + 8]		; Array location
 00000073  50				PUSH EAX				; Number of Bytes read
 00000074  53				PUSH EBX				
 00000075  52				PUSH EDX				; This is the current string OFFSET
 00000076  E8 00000007			CALL convertString


 0000007B  5B				POP EBX
 0000007C  59				POP ECX
 0000007D  5A				POP EDX
 0000007E  5D				POP EBP
 0000007F  C2 0010			RET 16
 00000082			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				;  Name: convertString
				;	
				;  Converts a string value to integer using string primitives
				;
				;  Receives: userString, userString Size, userArray
				;
				;  Preconditions:  None
				;
				;  Postconditions: None
				;
				;  Returns: userString
				; ---------------------------------------------------------------------------------
 00000082			convertString PROC
					LOCAL numInt:SDWORD
 00000082  55		   *	    push   ebp
 00000083  8B EC	   *	    mov    ebp, esp
 00000085  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000088  50				PUSH EAX
 00000089  53				PUSH EBX
 0000008A  51				PUSH ECX
 0000008B  57				PUSH EDI
 0000008C  56				PUSH ESI

 0000008D  C7 45 FC			MOV numInt, 0
	   00000000
 00000094  8B 7D 0C			MOV EDI, [EBP + 12]
 00000097  8B 75 08			MOV ESI, [EBP + 8]
 0000009A  8B 4D 10			MOV ECX, [EBP + 16]

					
 0000009D			_stringLoop:
 0000009D  AC				LODSB
 0000009E  3C 30			CMP AL, 48
 000000A0  7C 28			JL _invalid
 000000A2  3C 39			CMP AL, 57
 000000A4  7F 24			JG _invalid

 000000A6  0F B6 D8			MOVZX EBX, AL
 000000A9  83 EB 30			SUB EBX, 48
 000000AC  B8 0000000A			MOV EAX, 10
 000000B1  F7 65 FC			MUL numInt
 000000B4  03 C3			ADD EAX, EBX
 000000B6  89 45 FC			MOV numInt, EAX
 000000B9  49				DEC ECX
 000000BA  83 F9 00			CMP ECX, 0
 000000BD  74 02			JE _storeString
 000000BF  EB DC			JMP _stringLoop

 000000C1			_storeString:
 000000C1  89 07			MOV [EDI], EAX
 000000C3  E8 00000000 E		CALL WriteInt
 000000C8  EB 00			JMP _doneConverting

 000000CA			_invalid:

 000000CA			_doneConverting:
 000000CA  5E				POP ESI
 000000CB  5F				POP EDI
 000000CC  59				POP ECX
 000000CD  5B				POP EBX
 000000CE  58				POP EAX
 000000CF  C9		   *	    leave  
 000000D0  C2 000C			RET 12
 000000D3			convertString ENDP

				; ---------------------------------------------------------------------------------
				;  Name: sortList
				;	
				;  Sorts the array passed to the procedure
				;
				;  Receives: randomArray, ARRAYSIZE
				;
				;  Preconditions:  randomArray must be DWORD array
				;
				;  Postconditions:  EAX changed, EDX changed 
				;
				;  Returns: randomArray
				; ---------------------------------------------------------------------------------
 000000D3			sortList PROC
					; save stack frame
 000000D3  55				PUSH EBP
 000000D4  8B EC			MOV EBP, ESP
 000000D6  51				PUSH ECX
 000000D7  57				PUSH EDI

					; Assign counter (Array size) and array address
 000000D8  8B 4D 0C			MOV ECX, [EBP + 12]
 000000DB  8B 7D 08			MOV EDI, [EBP + 8]
 000000DE  83 E9 01			SUB ECX, 1

 000000E1			_outerLoop:
 000000E1  51				PUSH ECX	; Loop Counter
 000000E2  57				PUSH EDI
 000000E3				_innerLoop:
						; Compare values at adjacent indices, swap if first index is greater than second
 000000E3  8B 07				MOV EAX, [EDI]
 000000E5  8B 57 04				MOV EDX, [EDI + 4]
 000000E8  3B C2				CMP EAX, EDX
 000000EA  7F 02				JG _swap
 000000EC  EB 05				JMP _loop
						
 000000EE				_swap:
 000000EE  E8 0000000F				CALL exchangeElements

 000000F3				_loop:
 000000F3  83 C7 04				ADD EDI, 4
 000000F6  E2 EB				LOOP _innerLoop
 000000F8  5F				POP EDI
 000000F9  59				POP ECX
 000000FA  E2 E5			LOOP _outerLoop

 000000FC  5F				POP EDI
 000000FD  59				POP ECX
 000000FE  5D				POP EBP
 000000FF  C2 0008			RET 8
 00000102			sortList ENDP

				; ---------------------------------------------------------------------------------
				;  Name: exchangeElements
				;	
				;  exchanges two elements of an array
				;
				;  Receives: None
				;
				;  Preconditions: randomArray must be a DWORD array, value of current index in EAX, value of next index in EDX, address of current index in EDI
				;
				;  Postconditions: None
				;
				;  Returns: current and next index values are swapped 
				; ---------------------------------------------------------------------------------
 00000102			exchangeElements PROC
					; save stack frame
 00000102  55				PUSH EBP
 00000103  8B EC			MOV EBP, ESP

					; swap the values
 00000105  89 17			MOV [EDI], EDX
 00000107  89 47 04			MOV [EDI + 4], EAX

 0000010A  5D				POP EBP
 0000010B  C3				RET
 0000010C			exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				;  Name: displayMedian
				;	
				;  Sorts the array passed to the procedure
				;
				;  Receives: randomArray, ARRAYSIZE
				;
				;  Preconditions:  randomArray must be DWORD array
				;
				;  Postconditions:   EAX, EBX, ECX, and EDX changed, median displayed
				;
				;  Returns: None
				; ---------------------------------------------------------------------------------
 0000010C			displayMedian PROC
					; save stack frame
 0000010C  55				PUSH EBP
 0000010D  8B EC			MOV EBP, ESP

 0000010F  8B 45 0C			MOV EAX, [EBP + 12]			; ARRAYSIZE
 00000112  8B 75 08			MOV ESI, [EBP + 8]			; randomArray address

					; Check if ARRAYSIZE is odd or even
 00000115  33 D2			XOR EDX, EDX
 00000117  B9 00000002			MOV ECX, 2
 0000011C  F7 F1			DIV ECX
 0000011E  83 FA 00			CMP EDX, 0
 00000121  75 24			JNE _oddNumberedArray

					; If array is even, get addresses of the middle two numbers of the sorted array
 00000123  BB 00000004			MOV EBX, 4					; EAX is quotient of ARRAYSIZE DIV 2
 00000128  F7 E3			MUL EBX						; MUL EBX gives address of middle index in EAX
 0000012A  8B 14 06			MOV EDX, [ESI + EAX]		; Middle number 1
 0000012D  2B C3			SUB EAX, EBX
 0000012F  8B 1C 06			MOV EBX, [ESI + EAX]		; Middle number 2
					
					; Find average of two middle numbers
 00000132  03 DA			ADD EBX, EDX
 00000134  8B C3			MOV EAX, EBX
 00000136  BB 00000002			MOV EBX, 2
 0000013B  33 D2			XOR EDX, EDX
 0000013D  F7 F3			DIV EBX
					
					; If integer, print the result, else round up and print the result
 0000013F  83 FA 00			CMP EDX, 0 
 00000142  74 0F			JE _printMedian
 00000144  40				INC EAX
 00000145  EB 0C			JMP _printMedian

 00000147			_oddNumberedArray:
					; If odd numbered array, find the middle of array and print result
 00000147  BB 00000004			MOV EBX, 4					; EAX is quotient of ARRAYSIZE DIV 2
 0000014C  F7 E3			MUL EBX						; MUL EBX gives address of middle index in EAX
 0000014E  8B 1C 06			MOV EBX, [ESI+EAX]
 00000151  8B C3			MOV EAX, EBX
					
 00000153			_printMedian:
 00000153  8B 55 10			MOV EDX, [EBP + 16]
 00000156  E8 00000000 E		CALL WriteString
 0000015B  E8 00000000 E		CALL WriteDec
 00000160  E8 00000000 E		CALL Crlf
 00000165  E8 00000000 E		CALL Crlf

 0000016A  5D				POP EBP
 0000016B  C2 0008			RET 8
 0000016E			displayMedian ENDP

				; ---------------------------------------------------------------------------------
				;  Name: generateCounts
				;	
				;  populates the counts array with total amount of each random number
				;
				;  Preconditions: counts must be DWORD array
				;
				;  Postconditions: EAX, ECX, EDX changed, Goodbye message displayed
				;
				;  Receives: Arraysize, counts, HI, LO
				;
				;  Returns: None
				; ---------------------------------------------------------------------------------
 0000016E			generateCounts PROC
					; save stack frame
 0000016E  55				PUSH EBP
 0000016F  8B EC			MOV EBP, ESP
 00000171  56				PUSH ESI
 00000172  57				PUSH EDI

 00000173  8B 4D 18			MOV ECX, [EBP + 24]			; ARRAYSIZE
 00000176  8B 7D 14			MOV EDI, [EBP + 20]			; counts
 00000179  8B 75 08			MOV ESI, [EBP + 8]			; randomArray                                                                                                                                                          ]
 0000017C  8B 45 0C			MOV EAX, [EBP + 12]			; LO
 0000017F  33 D2			XOR EDX, EDX				; current count

 00000181			_startCount:
 00000181  8B 1E			MOV EBX, [ESI]
 00000183  3B C3			CMP EAX, EBX
 00000185  75 07			JNE _endCount
 00000187  42				INC EDX
 00000188  83 C6 04			ADD ESI, 4
 0000018B  49				DEC ECX
 0000018C  75 F3			JNZ _startCount

 0000018E			_endCount:
 0000018E  89 17			MOV [EDI], EDX
 00000190  83 C7 04			ADD EDI, 4
 00000193  33 D2			XOR EDX, EDX
 00000195  40				INC EAX
 00000196  83 F9 00			CMP ECX, 0
 00000199  74 02			JE _doneCounting
 0000019B  EB E4			JMP _startCount

 0000019D			_doneCounting:
 0000019D  5F				POP EDI
 0000019E  5E				POP ESI
 0000019F  5D				POP EBP
 000001A0  C2 0014			RET 20
 000001A3			generateCounts ENDP

				; ---------------------------------------------------------------------------------
				;  Name: farewell
				;	
				;  Displays goodbye message to the user
				;
				;  Preconditions: None
				;
				;  Postconditions: Goodbye message displayed
				;
				;  Receives: outro_1
				;
				;  Returns: None
				; ---------------------------------------------------------------------------------
 000001A3			farewell PROC
					; save stack frame
 000001A3  55				PUSH EBP
 000001A4  8B EC			MOV EBP, ESP

					; print greeting_1
 000001A6  8B 55 08			MOV EDX, [EBP+8]
 000001A9  E8 00000000 E		CALL WriteString
 000001AE  E8 00000000 E		CALL Crlf
					
					; return procedure
 000001B3  5D				POP EBP
 000001B4  C2 0008			RET 8
 000001B7			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29336.0	    03/07/21 13:15:26
!Project 6     (Proj5_dunnand.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001C8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000057 _TEXT	Length= 0000002B Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
convertString  . . . . . . . . .	P Near	 00000082 _TEXT	Length= 00000051 Public STDCALL
  numInt . . . . . . . . . . . .	DWord	 bp - 00000004
  _stringLoop  . . . . . . . . .	L Near	 0000009D _TEXT	
  _storeString . . . . . . . . .	L Near	 000000C1 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 000000CA _TEXT	
  _doneConverting  . . . . . . .	L Near	 000000CA _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000010C _TEXT	Length= 00000062 Public STDCALL
  _oddNumberedArray  . . . . . .	L Near	 00000147 _TEXT	
  _printMedian . . . . . . . . .	L Near	 00000153 _TEXT	
exchangeElements . . . . . . . .	P Near	 00000102 _TEXT	Length= 0000000A Public STDCALL
farewell . . . . . . . . . . . .	P Near	 000001A3 _TEXT	Length= 00000014 Public STDCALL
generateCounts . . . . . . . . .	P Near	 0000016E _TEXT	Length= 00000035 Public STDCALL
  _startCount  . . . . . . . . .	L Near	 00000181 _TEXT	
  _endCount  . . . . . . . . . .	L Near	 0000018E _TEXT	
  _doneCounting  . . . . . . . .	L Near	 0000019D _TEXT	
introduction . . . . . . . . . .	P Near	 00000036 _TEXT	Length= 00000021 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000036 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 0000002F Public STDCALL
  _outerLoop . . . . . . . . . .	L Near	 000000E1 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 000000E3 _TEXT	
  _swap  . . . . . . . . . . . .	L Near	 000000EE _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 000000F3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000058 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outro_1  . . . . . . . . . . . .	Byte	 0000014B _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 0000015F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userArray  . . . . . . . . . . .	DWord	 000001A0 _DATA	
userString . . . . . . . . . . .	Byte	 0000017F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
